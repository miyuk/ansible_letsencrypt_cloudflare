---
- name: "Create certificate directory '{{ certificate_directory }}'"
  file:
    path: "{{ certificate_directory }}"
    state: directory
    owner: "{{ certificate_files_owner }}"
    group: "{{ certificate_files_group }}"
    mode: 0755

- name: Create Private key
  openssl_privatekey:
    path: "{{ certificate_directory }}/{{ certificate_key_filename }}"
    size: "{{ certificate_key_size }}"
    owner: "{{ certificate_files_owner }}"
    group: "{{ certificate_files_group }}"
    mode: 0600
    force: "{{ certificate_force_create_key }}"

- name: Create CSR
  openssl_csr:
    path: "{{ certificate_directory }}/{{ certificate_csr_filename }}"
    privatekey_path: "{{ certificate_directory }}/{{ certificate_key_filename }}"
    common_name: "{{ certificate_common_name }}"
    country_name: "{{ certificate_country_name | default(omit) }}"
    state_or_province_name: "{{ certificate_state_or_province_name | default(omit) }}"
    locality_name: "{{ certificate_locality_name | default(omit) }}"
    organization_name: "{{ certificate_organization_name | default(omit) }}"
    email_address: "{{ certificate_email_address | default(omit) }}"
    subject_alt_name: "{{ certificate_subject_alt_name | default(omit) }}"
    force: "{{ certificate_force_create_csr }}"

- name: "Create Let's Encrypt directory '{{ letsencrypt_key_directory }}'"
  file:
    path: "{{ letsencrypt_key_directory }}"
    state: directory
    owner: "{{ certificate_files_owner }}"
    group: "{{ certificate_files_group }}"
    mode: 0755

- name: Create Let's Encrypt account key
  openssl_privatekey:
    path: "{{ letsencrypt_key_directory }}/{{ letsencrypt_key_filename }}"
    size: "{{ letsencrypt_key_size }}"
    owner: "{{ certificate_files_owner }}"
    group: "{{ certificate_files_group }}"
    mode: 0600
    force: "{{ letsencrypt_force_create_key }}"

- name: Prepare Let's Encrypt challenge
  acme_certificate:
    challenge: dns-01
    acme_version: 2
    acme_directory: https://acme-v02.api.letsencrypt.org/directory
    account_key: "{{ letsencrypt_key_directory }}/{{ letsencrypt_key_filename }}"
    csr: "{{ certificate_directory }}/{{ certificate_csr_filename }}"
    dest: "{{ certificate_directory }}/{{ certificate_crt_filename }}"
    account_email: "{{ letsencrypt_email }}"
    remaining_days: "{{ certificate_remaining_days }}"
    terms_agreed: yes
  register: letsencrypt_challenge

- block:
  - name: Update DNS record for Let's Encrypt challenge
    cloudflare_dns:
      zone: "{{ cloudflare_domain }}"
      record: "{{ letsencrypt_challenge.challenge_data[item.key]['dns-01'].record }}"
      state: present
      type: TXT
      value: "{{ letsencrypt_challenge.challenge_data[item.key]['dns-01'].resource_value | regex_replace('^(.*)$', '\"\\1\"') }}"
      account_email: "{{ cloudflare_email }}"
      account_api_token: "{{ cloudflare_api_key }}"
    with_dict: "{{ letsencrypt_challenge.challenge_data }}"

  - name: Verify Let's Encrypt challenge
    acme_certificate:
      challenge: dns-01
      acme_version: 2
      acme_directory: https://acme-v02.api.letsencrypt.org/directory
      account_key: "{{ letsencrypt_key_directory }}/{{ letsencrypt_key_filename }}"
      csr: "{{ certificate_directory }}/{{ certificate_csr_filename }}"
      dest: "{{ certificate_directory }}/{{ certificate_crt_filename }}"
      fullchain_dest: "{{ certificate_directory }}/{{ certificate_fullchain_filename }}"
      account_email: "{{ letsencrypt_email }}"
      data: "{{ letsencrypt_challenge }}"
      force: "{{ certificate_force_create_crt }}"
    register: letsencrypt_validation
    retries: 2
    delay: 30
    until: letsencrypt_validation is success

  always:
  - name: Delete DNS record for Let's Encrypt challenge
    cloudflare_dns:
      zone: "{{ cloudflare_domain }}"
      record: "{{ letsencrypt_challenge.challenge_data[item.key]['dns-01'].record }}"
      type: TXT
      value: "{{ letsencrypt_challenge.challenge_data[item.key]['dns-01'].resource_value | regex_replace('^(.*)$', '\"\\1\"') }}"
      state: absent
      account_email: "{{ cloudflare_email }}"
      account_api_token: "{{ cloudflare_api_key }}"
    with_dict: "{{ letsencrypt_challenge.challenge_data }}"
  when: letsencrypt_challenge is changed